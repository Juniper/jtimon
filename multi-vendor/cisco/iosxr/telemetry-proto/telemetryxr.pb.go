// ----------------------------------------------------------------------------
//
// August 2016
//
// Copyright (c) 2016 by Cisco Systems, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: telemetryxr.proto

package telemetry_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Telemetry message is the outermost payload message used to stream
// telemetry in a Model Driven Telemetry (MDT) system. MDT provides a
// mechanism for an external entity to subscribe to a data set defined in
// a Yang model and receive periodic or event-based updates of the data
// set from an MDT-capable device.
type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// node_id_str is a string encoded unique node ID of the MDT-capable
	// device producing the message. (node_id_uuid alternative is not currently
	// produced in IOS-XR)
	//
	// Types that are assignable to NodeId:
	//	*Telemetry_NodeIdStr
	NodeId isTelemetry_NodeId `protobuf_oneof:"node_id"`
	//
	// subscription_id_str is the name of the subscription against which
	// this content is being produced. (subscription_id alternative is not
	//  currently produced in IOS-XR)
	//
	// Types that are assignable to Subscription:
	//	*Telemetry_SubscriptionIdStr
	Subscription isTelemetry_Subscription `protobuf_oneof:"subscription"`
	//
	// sensor_path is not currently produced in IOS-XR
	// string   sensor_path = 5;
	//
	// encoding_path is the Yang path leading to the content in this message.
	// The Yang tree encoded in the content section of this message is rooted
	// at the point described by the encoding_path.
	EncodingPath string `protobuf:"bytes,6,opt,name=encoding_path,json=encodingPath,proto3" json:"encoding_path,omitempty"`
	//
	// model_version is not currently produced in IOS-XR
	// string   model_version = 7;
	//
	// collection_id identifies messages belonging to a collection round.
	// Multiple message may be generated from a collection round.
	CollectionId uint64 `protobuf:"varint,8,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	//
	// collection_start_time is the time when the collection identified by
	// the collection_id begins - encoded as milliseconds since the epoch.
	// If a single collection is spread over multiple Telemetry Messages,
	// collection_start_time may be encoded in the first Telemetry Message
	// for the collection only.
	CollectionStartTime uint64 `protobuf:"varint,9,opt,name=collection_start_time,json=collectionStartTime,proto3" json:"collection_start_time,omitempty"`
	//
	// msg_timestamp is the time when the data encoded in the Telemetry
	// message is generated - encoded as milliseconds since the epoch.
	MsgTimestamp uint64 `protobuf:"varint,10,opt,name=msg_timestamp,json=msgTimestamp,proto3" json:"msg_timestamp,omitempty"`
	//
	// data_gpbkv contains the payload data if data is being encoded in the
	// self-describing GPB-KV format.
	DataGpbkv []*TelemetryField `protobuf:"bytes,11,rep,name=data_gpbkv,json=dataGpbkv,proto3" json:"data_gpbkv,omitempty"`
	//
	// data_gpb contains the payload data if data is being encoded as
	// serialised GPB messages.
	DataGpb *TelemetryGPBTable `protobuf:"bytes,12,opt,name=data_gpb,json=dataGpb,proto3" json:"data_gpb,omitempty"`
	//
	// collection_end_time is the timestamp when the last Telemetry message
	// for a collection has been encoded - encoded as milliseconds since the
	// epoch. If a single collection is spread over multiple Telemetry
	// messages, collection_end_time is encoded in the last Telemetry Message
	// for the collection only.
	CollectionEndTime uint64 `protobuf:"varint,13,opt,name=collection_end_time,json=collectionEndTime,proto3" json:"collection_end_time,omitempty"`
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetryxr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_telemetryxr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_telemetryxr_proto_rawDescGZIP(), []int{0}
}

func (m *Telemetry) GetNodeId() isTelemetry_NodeId {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (x *Telemetry) GetNodeIdStr() string {
	if x, ok := x.GetNodeId().(*Telemetry_NodeIdStr); ok {
		return x.NodeIdStr
	}
	return ""
}

func (m *Telemetry) GetSubscription() isTelemetry_Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

func (x *Telemetry) GetSubscriptionIdStr() string {
	if x, ok := x.GetSubscription().(*Telemetry_SubscriptionIdStr); ok {
		return x.SubscriptionIdStr
	}
	return ""
}

func (x *Telemetry) GetEncodingPath() string {
	if x != nil {
		return x.EncodingPath
	}
	return ""
}

func (x *Telemetry) GetCollectionId() uint64 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *Telemetry) GetCollectionStartTime() uint64 {
	if x != nil {
		return x.CollectionStartTime
	}
	return 0
}

func (x *Telemetry) GetMsgTimestamp() uint64 {
	if x != nil {
		return x.MsgTimestamp
	}
	return 0
}

func (x *Telemetry) GetDataGpbkv() []*TelemetryField {
	if x != nil {
		return x.DataGpbkv
	}
	return nil
}

func (x *Telemetry) GetDataGpb() *TelemetryGPBTable {
	if x != nil {
		return x.DataGpb
	}
	return nil
}

func (x *Telemetry) GetCollectionEndTime() uint64 {
	if x != nil {
		return x.CollectionEndTime
	}
	return 0
}

type isTelemetry_NodeId interface {
	isTelemetry_NodeId()
}

type Telemetry_NodeIdStr struct {
	NodeIdStr string `protobuf:"bytes,1,opt,name=node_id_str,json=nodeIdStr,proto3,oneof"` // bytes node_id_uuid = 2;
}

func (*Telemetry_NodeIdStr) isTelemetry_NodeId() {}

type isTelemetry_Subscription interface {
	isTelemetry_Subscription()
}

type Telemetry_SubscriptionIdStr struct {
	SubscriptionIdStr string `protobuf:"bytes,3,opt,name=subscription_id_str,json=subscriptionIdStr,proto3,oneof"` // uint32   subscription_id = 4;
}

func (*Telemetry_SubscriptionIdStr) isTelemetry_Subscription() {}

//
// TelemetryField messages are used to export content in the self
// describing GPB KV form. The TelemetryField message is sufficient to
// decode telemetry messages for all models. KV-GPB encoding is very
// similar in concept, to JSON encoding
type TelemetryField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// timestamp represents the starting time of the generation of data
	// starting from this key, value pair in this message - encoded as
	// milliseconds since the epoch. It is encoded when different from the
	// msg_timestamp in the containing Telemetry Message. This field can be
	// omitted if the value is the same as a TelemetryField message up the
	// hierarchy within the same Telemetry Message as well.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//
	// name: string encoding of the name in the key, value pair. It is
	// the corresponding YANG element name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//
	// value_by_type, if present, for the corresponding YANG element
	// represented by the name field in the same TelemetryField message. The
	// value is encoded to the matching type as defined in the YANG model.
	// YANG models often define new types (derived types) using one or more
	// base types.  The types included in the oneof grouping is sufficient to
	// represent such derived types. Derived types represented as a Yang
	// container are encoded using the nesting primitive defined in this
	// encoding proposal.
	//
	// Types that are assignable to ValueByType:
	//	*TelemetryField_BytesValue
	//	*TelemetryField_StringValue
	//	*TelemetryField_BoolValue
	//	*TelemetryField_Uint32Value
	//	*TelemetryField_Uint64Value
	//	*TelemetryField_Sint32Value
	//	*TelemetryField_Sint64Value
	//	*TelemetryField_DoubleValue
	//	*TelemetryField_FloatValue
	ValueByType isTelemetryField_ValueByType `protobuf_oneof:"value_by_type"`
	//
	// The Yang model may include nesting (e.g hierarchy of containers). The
	// next level of nesting, if present, is encoded, starting from fields.
	Fields []*TelemetryField `protobuf:"bytes,15,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *TelemetryField) Reset() {
	*x = TelemetryField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetryxr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryField) ProtoMessage() {}

func (x *TelemetryField) ProtoReflect() protoreflect.Message {
	mi := &file_telemetryxr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryField.ProtoReflect.Descriptor instead.
func (*TelemetryField) Descriptor() ([]byte, []int) {
	return file_telemetryxr_proto_rawDescGZIP(), []int{1}
}

func (x *TelemetryField) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TelemetryField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *TelemetryField) GetValueByType() isTelemetryField_ValueByType {
	if m != nil {
		return m.ValueByType
	}
	return nil
}

func (x *TelemetryField) GetBytesValue() []byte {
	if x, ok := x.GetValueByType().(*TelemetryField_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (x *TelemetryField) GetStringValue() string {
	if x, ok := x.GetValueByType().(*TelemetryField_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *TelemetryField) GetBoolValue() bool {
	if x, ok := x.GetValueByType().(*TelemetryField_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *TelemetryField) GetUint32Value() uint32 {
	if x, ok := x.GetValueByType().(*TelemetryField_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *TelemetryField) GetUint64Value() uint64 {
	if x, ok := x.GetValueByType().(*TelemetryField_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *TelemetryField) GetSint32Value() int32 {
	if x, ok := x.GetValueByType().(*TelemetryField_Sint32Value); ok {
		return x.Sint32Value
	}
	return 0
}

func (x *TelemetryField) GetSint64Value() int64 {
	if x, ok := x.GetValueByType().(*TelemetryField_Sint64Value); ok {
		return x.Sint64Value
	}
	return 0
}

func (x *TelemetryField) GetDoubleValue() float64 {
	if x, ok := x.GetValueByType().(*TelemetryField_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *TelemetryField) GetFloatValue() float32 {
	if x, ok := x.GetValueByType().(*TelemetryField_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *TelemetryField) GetFields() []*TelemetryField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type isTelemetryField_ValueByType interface {
	isTelemetryField_ValueByType()
}

type TelemetryField_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,4,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

type TelemetryField_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type TelemetryField_BoolValue struct {
	BoolValue bool `protobuf:"varint,6,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type TelemetryField_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,7,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type TelemetryField_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,8,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type TelemetryField_Sint32Value struct {
	Sint32Value int32 `protobuf:"zigzag32,9,opt,name=sint32_value,json=sint32Value,proto3,oneof"`
}

type TelemetryField_Sint64Value struct {
	Sint64Value int64 `protobuf:"zigzag64,10,opt,name=sint64_value,json=sint64Value,proto3,oneof"`
}

type TelemetryField_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,11,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type TelemetryField_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,12,opt,name=float_value,json=floatValue,proto3,oneof"`
}

func (*TelemetryField_BytesValue) isTelemetryField_ValueByType() {}

func (*TelemetryField_StringValue) isTelemetryField_ValueByType() {}

func (*TelemetryField_BoolValue) isTelemetryField_ValueByType() {}

func (*TelemetryField_Uint32Value) isTelemetryField_ValueByType() {}

func (*TelemetryField_Uint64Value) isTelemetryField_ValueByType() {}

func (*TelemetryField_Sint32Value) isTelemetryField_ValueByType() {}

func (*TelemetryField_Sint64Value) isTelemetryField_ValueByType() {}

func (*TelemetryField_DoubleValue) isTelemetryField_ValueByType() {}

func (*TelemetryField_FloatValue) isTelemetryField_ValueByType() {}

// TelemetryGPBTable contains a repeated number of TelemetryRowGPB,
// each of which represents content from a subtree instance in the
// the YANG model. For example; a TelemetryGPBTable might contain
// the interface statistics of a collection of interfaces.
type TelemetryGPBTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row []*TelemetryRowGPB `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty"`
}

func (x *TelemetryGPBTable) Reset() {
	*x = TelemetryGPBTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetryxr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryGPBTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryGPBTable) ProtoMessage() {}

func (x *TelemetryGPBTable) ProtoReflect() protoreflect.Message {
	mi := &file_telemetryxr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryGPBTable.ProtoReflect.Descriptor instead.
func (*TelemetryGPBTable) Descriptor() ([]byte, []int) {
	return file_telemetryxr_proto_rawDescGZIP(), []int{2}
}

func (x *TelemetryGPBTable) GetRow() []*TelemetryRowGPB {
	if x != nil {
		return x.Row
	}
	return nil
}

//
// TelemetryRowGPB, in conjunction with the Telemetry encoding_path and
// model_version, unambiguously represents the root of a subtree in
// the YANG model, and content from that subtree encoded in serialised
// GPB messages. For example; a TelemetryRowGPB might contain the
// interface statistics of one interface. Per encoding-path .proto
// messages are required to decode keys/content pairs below.
type TelemetryRowGPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// timestamp at which the data for this instance of the TelemetryRowGPB
	// message was generated by an MDT-capable device - encoded as
	// milliseconds since the epoch.  When included, this is typically
	// different from the msg_timestamp in the containing Telemetry message.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	//
	// keys: if the encoding-path includes one or more list elements, and/or
	// ends in a list element, the keys field is a GPB encoded message that
	// contains the sequence of key values for each such list element in the
	// encoding-path traversed starting from the root.  The set of keys
	// unambiguously identifies the instance of data encoded in the
	// TelemetryRowGPB message. Corresponding protobuf message definition will
	// be required to decode the byte stream. The encoding_path field in
	// Telemetry message, together with model_version field should be
	// sufficient to identify the corresponding protobuf message.
	Keys []byte `protobuf:"bytes,10,opt,name=keys,proto3" json:"keys,omitempty"`
	//
	// content: the content field is a GPB encoded message that contains the
	// data for the corresponding encoding-path. A separate decoding pass
	// would be performed by consumer with the content field as a GPB message
	// and the matching .proto used to decode the message. Corresponding
	// protobuf message definition will be required to decode the byte
	// stream. The encoding_path field in Telemetry message, together with
	// model_version field should be sufficient to identify the corresponding
	// protobuf message. The decoded combination of keys (when present) and
	// content, unambiguously represents an instance of the data set, as
	// defined in the Yang model, identified by the encoding-path in the
	// containing Telemetry message.
	Content []byte `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *TelemetryRowGPB) Reset() {
	*x = TelemetryRowGPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetryxr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryRowGPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryRowGPB) ProtoMessage() {}

func (x *TelemetryRowGPB) ProtoReflect() protoreflect.Message {
	mi := &file_telemetryxr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryRowGPB.ProtoReflect.Descriptor instead.
func (*TelemetryRowGPB) Descriptor() ([]byte, []int) {
	return file_telemetryxr_proto_rawDescGZIP(), []int{3}
}

func (x *TelemetryRowGPB) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TelemetryRowGPB) GetKeys() []byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *TelemetryRowGPB) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_telemetryxr_proto protoreflect.FileDescriptor

var file_telemetryxr_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x78, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x78, 0x72,
	0x22, 0xc4, 0x03, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x53,
	0x74, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x67, 0x70,
	0x62, 0x6b, 0x76, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x78, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x47, 0x70, 0x62, 0x6b,
	0x76, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x67, 0x70, 0x62, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x78,
	0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x47, 0x50, 0x42, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x47, 0x70, 0x62, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x03, 0x0a, 0x0e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x78, 0x72, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x11, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x47, 0x50, 0x42, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x03,
	0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x78, 0x72, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x6f, 0x77, 0x47, 0x50, 0x42, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0x5d, 0x0a, 0x0f,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x47, 0x50, 0x42, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x4a, 0x5a, 0x48, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x69, 0x6c, 0x65, 0x73, 0x68,
	0x73, 0x69, 0x6d, 0x61, 0x72, 0x69, 0x61, 0x2f, 0x6a, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x2d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x2f, 0x69, 0x6f, 0x73, 0x78, 0x72, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_telemetryxr_proto_rawDescOnce sync.Once
	file_telemetryxr_proto_rawDescData = file_telemetryxr_proto_rawDesc
)

func file_telemetryxr_proto_rawDescGZIP() []byte {
	file_telemetryxr_proto_rawDescOnce.Do(func() {
		file_telemetryxr_proto_rawDescData = protoimpl.X.CompressGZIP(file_telemetryxr_proto_rawDescData)
	})
	return file_telemetryxr_proto_rawDescData
}

var file_telemetryxr_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_telemetryxr_proto_goTypes = []interface{}{
	(*Telemetry)(nil),         // 0: telemetryxr.Telemetry
	(*TelemetryField)(nil),    // 1: telemetryxr.TelemetryField
	(*TelemetryGPBTable)(nil), // 2: telemetryxr.TelemetryGPBTable
	(*TelemetryRowGPB)(nil),   // 3: telemetryxr.TelemetryRowGPB
}
var file_telemetryxr_proto_depIdxs = []int32{
	1, // 0: telemetryxr.Telemetry.data_gpbkv:type_name -> telemetryxr.TelemetryField
	2, // 1: telemetryxr.Telemetry.data_gpb:type_name -> telemetryxr.TelemetryGPBTable
	1, // 2: telemetryxr.TelemetryField.fields:type_name -> telemetryxr.TelemetryField
	3, // 3: telemetryxr.TelemetryGPBTable.row:type_name -> telemetryxr.TelemetryRowGPB
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_telemetryxr_proto_init() }
func file_telemetryxr_proto_init() {
	if File_telemetryxr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telemetryxr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Telemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetryxr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetryxr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryGPBTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetryxr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryRowGPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_telemetryxr_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Telemetry_NodeIdStr)(nil),
		(*Telemetry_SubscriptionIdStr)(nil),
	}
	file_telemetryxr_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TelemetryField_BytesValue)(nil),
		(*TelemetryField_StringValue)(nil),
		(*TelemetryField_BoolValue)(nil),
		(*TelemetryField_Uint32Value)(nil),
		(*TelemetryField_Uint64Value)(nil),
		(*TelemetryField_Sint32Value)(nil),
		(*TelemetryField_Sint64Value)(nil),
		(*TelemetryField_DoubleValue)(nil),
		(*TelemetryField_FloatValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telemetryxr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_telemetryxr_proto_goTypes,
		DependencyIndexes: file_telemetryxr_proto_depIdxs,
		MessageInfos:      file_telemetryxr_proto_msgTypes,
	}.Build()
	File_telemetryxr_proto = out.File
	file_telemetryxr_proto_rawDesc = nil
	file_telemetryxr_proto_goTypes = nil
	file_telemetryxr_proto_depIdxs = nil
}
